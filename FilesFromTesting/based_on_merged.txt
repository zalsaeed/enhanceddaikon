Daikon version 5.4.1, released October 4, 2016; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
ObserverEffect.Observer:::OBJECT
this.subject == null
===========================================================================
ObserverEffect.Observer.Observer():::EXIT
===========================================================================
ObserverEffect.ObserverA:::OBJECT
this.value one of { 0, 10, 15 }
this has only one value
===========================================================================
ObserverEffect.ObserverA.ObserverA(ObserverEffect.Subject):::ENTER
subject.state == size(subject.observers[])
subject has only one value
subject.observers[].getClass().getName() == []
subject.observers.getClass().getName() == java.util.ArrayList.class
subject.observers has only one value
subject.observers[] == []
subject.dumObserver == null
===========================================================================
ObserverEffect.ObserverA.ObserverA(ObserverEffect.Subject):::EXIT
subject.observers[].ObserverA.value == this.value
this.value == subject.state
this.value == orig(subject.state)
this.value == size(subject.observers[])-1
this.value == orig(size(subject.observers[]))
subject.observers == orig(subject.observers)
subject.observers[].ObserverA == subject.observers[this.value]
subject.dumObserver == orig(subject.dumObserver)
subject.observers[].getClass().getName() == [ObserverEffect.ObserverA]
subject.observers[].getClass().getName() elements == ObserverEffect.ObserverA.class
subject.observers.getClass().getName() == java.util.ArrayList.class
subject.observers has only one value
subject.observers[] contains no nulls and has only one value, of length 1
subject.observers[] elements has only one value
subject.observers[].ObserverA has only one value
subject.dumObserver == null
size(subject.observers[]) == 1
subject.observers[] elements == subject.observers[].ObserverA
subject.observers[].ObserverA in subject.observers[]
subject.observers[] elements == subject.observers[this.value]
===========================================================================
ObserverEffect.ObserverA.update():::ENTER
this.value one of { 0, 15 }
===========================================================================
ObserverEffect.ObserverA.update():::EXIT
this.value one of { 10, 15 }
===========================================================================
ObserverEffect.ObserverB:::OBJECT
this.value one of { 0, 10, 15 }
this has only one value
===========================================================================
ObserverEffect.ObserverB.ObserverB(ObserverEffect.Subject):::ENTER
subject.observers[].ObserverA.value == subject.state
subject == subject.dumObserver.subject
subject.state == size(subject.observers[])-1
subject.observers[].ObserverA == subject.observers[subject.state]
subject.dumObserver == subject.observers[subject.state]
subject has only one value
subject.dumObserver.getClass().getName() == ObserverEffect.ObserverA.class
subject.observers[].getClass().getName() == [ObserverEffect.ObserverA]
subject.observers[].getClass().getName() elements == ObserverEffect.ObserverA.class
subject.observers.getClass().getName() == java.util.ArrayList.class
subject.observers has only one value
subject.observers[] contains no nulls and has only one value, of length 1
subject.observers[] elements has only one value
subject.observers[].ObserverA has only one value
subject.dumObserver has only one value
size(subject.observers[]) == 1
subject.dumObserver.getClass().getName() in subject.observers[].getClass().getName()
subject.observers[] elements == subject.observers[].ObserverA
subject.observers[].ObserverA in subject.observers[]
subject.dumObserver in subject.observers[]
subject.observers[] elements == subject.dumObserver
subject.observers[] elements == subject.observers[subject.state]
===========================================================================
ObserverEffect.ObserverB.ObserverB(ObserverEffect.Subject):::EXIT
subject.observers[].ObserverA.value == this.value
this.value == subject.observers[].ObserverB.value
this.value == subject.state
this.value == orig(subject.observers[].ObserverA.value)
this.value == orig(subject.state)
this.value == orig(size(subject.observers[]))-1
subject.dumObserver.subject == orig(subject)
subject.observers == orig(subject.observers)
subject.observers[].ObserverA == orig(subject.observers[].ObserverA)
subject.observers[].ObserverA == subject.observers[this.value]
subject.dumObserver == orig(subject.dumObserver)
subject.dumObserver == subject.observers[this.value]
size(subject.observers[])-1 == orig(size(subject.observers[]))
orig(subject.observers[post(subject.observers[].ObserverA.value)]) == subject.observers[this.value]
subject.observers[this.value] == orig(subject.observers[post(this.value)])
subject.observers[this.value] == orig(subject.observers[post(subject.observers[].ObserverB.value)])
subject.observers[this.value] == orig(subject.observers[post(subject.state)])
subject.observers[this.value] == orig(subject.observers[subject.observers[].ObserverA.value])
subject.observers[this.value] == orig(subject.observers[subject.state])
subject.dumObserver.getClass().getName() == ObserverEffect.ObserverA.class
subject.observers[].getClass().getName() == [ObserverEffect.ObserverA, ObserverEffect.ObserverB]
subject.observers.getClass().getName() == java.util.ArrayList.class
subject.observers has only one value
subject.observers[] contains no nulls and has only one value, of length 2
subject.observers[].ObserverA has only one value
subject.dumObserver has only one value
subject.observers[].ObserverB has only one value
size(subject.observers[]) == 2
subject.observers[this.value] has only one value
subject.dumObserver.getClass().getName() in subject.observers[].getClass().getName()
subject.dumObserver.getClass().getName() == orig(subject.dumObserver.getClass().getName())
subject.dumObserver.getClass().getName() in orig(subject.observers[].getClass().getName())
subject.observers.getClass().getName() == orig(subject.observers.getClass().getName())
subject.observers[].ObserverA in subject.observers[]
subject.dumObserver in subject.observers[]
subject.observers[].ObserverB in subject.observers[]
orig(subject.observers[]) elements == subject.observers[].ObserverA
subject.observers[].ObserverA in orig(subject.observers[])
orig(subject.observers[]) elements == subject.dumObserver
subject.dumObserver in orig(subject.observers[])
orig(subject.observers[]) elements == subject.observers[this.value]
===========================================================================
ObserverEffect.ObserverB.update():::ENTER
this.value one of { 0, 15 }
===========================================================================
ObserverEffect.ObserverB.update():::EXIT
this.value one of { 10, 15 }
===========================================================================
ObserverEffect.ObserverC:::OBJECT
this.value one of { 0, 10, 15 }
this has only one value
===========================================================================
ObserverEffect.ObserverC.ObserverC(ObserverEffect.Subject):::ENTER
subject.observers[].ObserverA.value == subject.state
subject == subject.dumObserver.subject
subject.observers[].ObserverB.value == subject.state
subject.observers[].ObserverA == subject.observers[subject.state]
subject.dumObserver == subject.observers[subject.state]
subject has only one value
subject.dumObserver.getClass().getName() == ObserverEffect.ObserverA.class
subject.observers[].getClass().getName() == [ObserverEffect.ObserverA, ObserverEffect.ObserverB]
subject.observers.getClass().getName() == java.util.ArrayList.class
subject.observers has only one value
subject.observers[] contains no nulls and has only one value, of length 2
subject.state == 0
subject.observers[].ObserverA has only one value
subject.observers[].ObserverB has only one value
subject.dumObserver has only one value
size(subject.observers[]) == 2
subject.observers[subject.state] has only one value
subject.dumObserver.getClass().getName() in subject.observers[].getClass().getName()
subject.observers[].ObserverA in subject.observers[]
subject.observers[].ObserverB in subject.observers[]
subject.dumObserver in subject.observers[]
===========================================================================
ObserverEffect.ObserverC.ObserverC(ObserverEffect.Subject):::EXIT
subject.observers[].ObserverA.value == this.value
this.value == subject.observers[].ObserverC.value
this.value == subject.observers[].ObserverB.value
this.value == subject.state
this.value == orig(subject.observers[].ObserverA.value)
this.value == orig(subject.observers[].ObserverB.value)
this.value == orig(subject.state)
subject.dumObserver.subject == orig(subject)
subject.observers == orig(subject.observers)
subject.observers[].ObserverA == orig(subject.observers[].ObserverA)
subject.observers[].ObserverA == subject.observers[this.value]
subject.observers[].ObserverB == orig(subject.observers[].ObserverB)
subject.dumObserver == orig(subject.dumObserver)
subject.dumObserver == subject.observers[this.value]
size(subject.observers[])-1 == orig(size(subject.observers[]))
orig(subject.observers[post(subject.observers[].ObserverA.value)]) == subject.observers[this.value]
subject.observers[this.value] == orig(subject.observers[post(this.value)])
subject.observers[this.value] == orig(subject.observers[post(subject.observers[].ObserverC.value)])
subject.observers[this.value] == orig(subject.observers[post(subject.observers[].ObserverB.value)])
subject.observers[this.value] == orig(subject.observers[post(subject.state)])
subject.observers[this.value] == orig(subject.observers[subject.observers[].ObserverA.value])
subject.observers[this.value] == orig(subject.observers[subject.observers[].ObserverB.value])
subject.observers[this.value] == orig(subject.observers[subject.state])
this.value == 0
subject.dumObserver.getClass().getName() == ObserverEffect.ObserverA.class
subject.observers[].getClass().getName() == [ObserverEffect.ObserverA, ObserverEffect.ObserverB, ObserverEffect.ObserverC]
subject.observers.getClass().getName() == java.util.ArrayList.class
subject.observers has only one value
subject.observers[] contains no nulls and has only one value, of length 3
subject.observers[].ObserverC has only one value
subject.observers[].ObserverA has only one value
subject.observers[].ObserverB has only one value
subject.dumObserver has only one value
size(subject.observers[]) == 3
subject.observers[this.value] has only one value
subject.dumObserver.getClass().getName() in subject.observers[].getClass().getName()
subject.dumObserver.getClass().getName() == orig(subject.dumObserver.getClass().getName())
subject.dumObserver.getClass().getName() in orig(subject.observers[].getClass().getName())
subject.observers.getClass().getName() == orig(subject.observers.getClass().getName())
subject.observers[].ObserverC in subject.observers[]
subject.observers[].ObserverA in subject.observers[]
subject.observers[].ObserverB in subject.observers[]
subject.dumObserver in subject.observers[]
subject.observers[].ObserverA in orig(subject.observers[])
subject.observers[].ObserverB in orig(subject.observers[])
subject.dumObserver in orig(subject.observers[])
===========================================================================
ObserverEffect.ObserverC.update():::ENTER
this.value one of { 0, 15 }
===========================================================================
ObserverEffect.ObserverC.update():::EXIT
this.value one of { 10, 15 }
===========================================================================
ObserverEffect.Subject:::OBJECT
this.dumObserver.subject.observers[].ObserverB.value == this.observers[].ObserverB.value
this.dumObserver == this.dumObserver.subject.dumObserver
this.dumObserver.subject.observers[].ObserverC == this.observers[].ObserverC
this.observers[].ObserverA == this.dumObserver.subject.observers[].ObserverA
this.observers[].ObserverB == this.dumObserver.subject.observers[].ObserverB
this.observers[].ObserverC.value == this.dumObserver.subject.observers[].ObserverC.value
this.dumObserver.subject == this
this.dumObserver.subject.observers[].getClass().getName() == this.observers[].getClass().getName()
this.observers == this.dumObserver.subject.observers
this.state == this.dumObserver.subject.state
this.observers[].ObserverA.value == this.dumObserver.subject.observers[].ObserverA.value
this.dumObserver.subject.observers[] elements != null
this.observers[].ObserverA has only one value
this.observers[].ObserverA != null
this.observers[].ObserverB has only one value
this.observers[].ObserverB != null
this.observers[].ObserverC has only one value
this.observers[].ObserverC != null
this.observers[].ObserverC.value one of { 0, 10, 15 }
this.dumObserver.subject.observers[].ObserverA has only one value
this.dumObserver.subject.observers[].ObserverA != null
this.dumObserver.subject has only one value
this.dumObserver.subject != null
this.observers.getClass().getName() == java.util.ArrayList.class
this.observers has only one value
this.observers != null
this.state one of { 0, 10, 15 }
this has only one value
this != null
this.dumObserver.subject.observers has only one value
this.dumObserver.subject.observers != null
this.dumObserver.subject.state one of { 0, 10, 15 }
this.observers[] elements != null
this.observers[].ObserverB.value one of { 0, 10, 15 }
this.dumObserver.subject.observers.getClass().getName() == java.util.ArrayList.class
this.dumObserver.getClass().getName() == ObserverEffect.ObserverA.class
this.dumObserver.subject.dumObserver has only one value
this.dumObserver.subject.dumObserver != null
this.observers[].ObserverA.value one of { 0, 10, 15 }
this.dumObserver.subject.observers[].ObserverA.value one of { 0, 10, 15 }
size(this.dumObserver.subject.observers[]) one of { 1, 2, 3 }
this.dumObserver in this.dumObserver.subject.observers[]
this.observers[].ObserverA in this.dumObserver.subject.observers[]
this.observers[].ObserverB in this.dumObserver.subject.observers[]
this.observers[].ObserverC in this.dumObserver.subject.observers[]
this.dumObserver.subject.observers[].ObserverA in this.dumObserver.subject.observers[]
this.dumObserver.subject.observers[] == this.observers[] (elementwise)
this.dumObserver.subject.dumObserver in this.dumObserver.subject.observers[]
this.dumObserver.subject.dumObserver.getClass().getName() == this.dumObserver.getClass().getName()
this.observers[].ObserverA in this.observers[]
this.observers[].ObserverB in this.observers[]
this.observers[].ObserverC in this.observers[]
this.observers[].ObserverC.value != size(this.dumObserver.subject.observers[])
this.observers[].ObserverC.value != size(this.dumObserver.subject.observers[])-1
this.observers[].ObserverC.value != size(this.observers[])
this.observers[].ObserverC.value != size(this.observers[])-1
this.dumObserver.subject.observers[].ObserverA in this.observers[]
this.dumObserver.subject.observers[].getClass().getName() == this.observers[].getClass().getName() (elementwise)
this.dumObserver.getClass().getName() in this.dumObserver.subject.observers[].getClass().getName()
this.observers.getClass().getName() == this.dumObserver.subject.observers.getClass().getName()
this.observers.getClass().getName() != this.dumObserver.getClass().getName()
this.state != size(this.dumObserver.subject.observers[])
this.dumObserver.getClass().getName() in this.observers[].getClass().getName()
this.dumObserver.subject.state != size(this.dumObserver.subject.observers[])
this.dumObserver.subject.state != size(this.observers[])
this.dumObserver.subject.dumObserver in this.observers[]
this.observers[].ObserverB.value != size(this.dumObserver.subject.observers[])
this.observers[].ObserverB.value != size(this.dumObserver.subject.observers[])-1
this.observers[].ObserverB.value != size(this.observers[])
this.observers[].ObserverB.value != size(this.observers[])-1
this.dumObserver.subject.observers.getClass().getName() != this.dumObserver.getClass().getName()
this.observers[].ObserverA.value != size(this.dumObserver.subject.observers[])
this.observers[].ObserverA.value != size(this.observers[])
this.dumObserver.subject.observers[].ObserverA.value != size(this.dumObserver.subject.observers[])
this.dumObserver.subject.observers[].ObserverA.value != size(this.observers[])
===========================================================================
ObserverEffect.Subject.Subject():::EXIT
this.dumObserver == this.observers[this.state]
this.dumObserver.subject.observers[] == this.observers[]
this.observers[].ObserverA == this.observers[this.state]
this.dumObserver has only one value
this.observers[].getClass().getName() == [ObserverEffect.ObserverA]
this.observers[].getClass().getName() elements == ObserverEffect.ObserverA.class
this.observers[] contains no nulls and has only one value, of length 1
this.observers[] elements has only one value
size(this.observers[]) == 1
this.dumObserver in this.observers[]
this.observers[] elements == this.dumObserver
this.observers[] elements == this.observers[].ObserverA
this.observers[] elements == this.observers[this.state]
===========================================================================
ObserverEffect.Subject.getState():::ENTER
this.dumObserver.subject.observers[] == this.observers[]
this.dumObserver has only one value
this.observers[].ObserverC.value one of { 0, 15 }
this.state one of { 10, 15 }
this.observers[].getClass().getName() == [ObserverEffect.ObserverA, ObserverEffect.ObserverB, ObserverEffect.ObserverC]
this.observers[] contains no nulls and has only one value, of length 3
size(this.observers[]) == 3
this.dumObserver in this.observers[]
===========================================================================
ObserverEffect.Subject.getState():::EXIT
this.dumObserver == orig(this.dumObserver)
this.dumObserver == orig(this.dumObserver.subject.dumObserver)
this.dumObserver.subject.observers[] == this.observers[]
this.observers[].ObserverA == orig(this.observers[].ObserverA)
this.observers[].ObserverA == orig(this.dumObserver.subject.observers[].ObserverA)
this.observers[].ObserverB == orig(this.observers[].ObserverB)
this.observers[].ObserverB == orig(this.dumObserver.subject.observers[].ObserverB)
this.observers[].ObserverC == orig(this.dumObserver.subject.observers[].ObserverC)
this.observers[].ObserverC == orig(this.observers[].ObserverC)
this.observers[].ObserverC.value == orig(this.observers[].ObserverC.value)
this.observers[].ObserverC.value == orig(this.dumObserver.subject.observers[].ObserverC.value)
this.dumObserver.subject == orig(this)
this.observers == orig(this.observers)
this.observers == orig(this.dumObserver.subject.observers)
this.state == return
this.dumObserver.subject.state == return
this.observers[] == orig(this.dumObserver.subject.observers[])
this.observers[] == orig(this.observers[])
this.observers[].ObserverB.value == orig(this.dumObserver.subject.observers[].ObserverB.value)
this.observers[].ObserverB.value == orig(this.observers[].ObserverB.value)
this.observers[].ObserverA.value == orig(this.observers[].ObserverA.value)
this.observers[].ObserverA.value == orig(this.dumObserver.subject.observers[].ObserverA.value)
return == orig(this.state)
return == orig(this.dumObserver.subject.state)
this.dumObserver has only one value
this.observers[].ObserverC.value one of { 0, 15 }
this.observers[].getClass().getName() == [ObserverEffect.ObserverA, ObserverEffect.ObserverB, ObserverEffect.ObserverC]
this.observers[] contains no nulls and has only one value, of length 3
return one of { 10, 15 }
orig(this) has only one value
size(this.observers[]) == 3
this.dumObserver in this.observers[]
this.observers.getClass().getName() == orig(this.observers.getClass().getName())
this.observers.getClass().getName() == orig(this.dumObserver.subject.observers.getClass().getName())
this.dumObserver.getClass().getName() == orig(this.dumObserver.subject.dumObserver.getClass().getName())
this.dumObserver.getClass().getName() == orig(this.dumObserver.getClass().getName())
===========================================================================
ObserverEffect.Subject.notifyAllObservers():::ENTER
this.dumObserver.subject.observers[].ObserverB.value == this.observers[].ObserverC.value
this.dumObserver.subject.observers[] == this.observers[]
this.observers[].ObserverC.value == this.observers[].ObserverB.value
this.observers[].ObserverC.value == this.observers[].ObserverA.value
this.observers[].ObserverC.value == this.dumObserver.subject.observers[].ObserverA.value
this.dumObserver has only one value
this.observers[].ObserverC.value one of { 0, 15 }
this.state one of { 10, 15 }
this.observers[].getClass().getName() == [ObserverEffect.ObserverA, ObserverEffect.ObserverB, ObserverEffect.ObserverC]
this.observers[] contains no nulls and has only one value, of length 3
size(this.observers[]) == 3
this.dumObserver in this.observers[]
===========================================================================
ObserverEffect.Subject.notifyAllObservers():::EXIT
this.dumObserver.subject.observers[].ObserverB.value == this.state
this.dumObserver == orig(this.dumObserver)
this.dumObserver == orig(this.dumObserver.subject.dumObserver)
this.dumObserver.subject.observers[] == this.observers[]
this.observers[].ObserverA == orig(this.observers[].ObserverA)
this.observers[].ObserverA == orig(this.dumObserver.subject.observers[].ObserverA)
this.observers[].ObserverB == orig(this.observers[].ObserverB)
this.observers[].ObserverB == orig(this.dumObserver.subject.observers[].ObserverB)
this.observers[].ObserverC == orig(this.dumObserver.subject.observers[].ObserverC)
this.observers[].ObserverC == orig(this.observers[].ObserverC)
this.observers[].ObserverC.value == this.state
this.dumObserver.subject == orig(this)
this.observers == orig(this.observers)
this.observers == orig(this.dumObserver.subject.observers)
this.state == this.dumObserver.subject.observers[].ObserverC.value
this.state == this.observers[].ObserverB.value
this.state == this.observers[].ObserverA.value
this.state == this.dumObserver.subject.observers[].ObserverA.value
this.state == orig(this.state)
this.state == orig(this.dumObserver.subject.state)
this.observers[] == orig(this.dumObserver.subject.observers[])
this.observers[] == orig(this.observers[])
this.dumObserver has only one value
this.state one of { 10, 15 }
this.observers[].getClass().getName() == [ObserverEffect.ObserverA, ObserverEffect.ObserverB, ObserverEffect.ObserverC]
this.observers[] contains no nulls and has only one value, of length 3
orig(this) has only one value
size(this.observers[]) == 3
this.dumObserver in this.observers[]
this.observers.getClass().getName() == orig(this.observers.getClass().getName())
this.observers.getClass().getName() == orig(this.dumObserver.subject.observers.getClass().getName())
this.dumObserver.getClass().getName() == orig(this.dumObserver.subject.dumObserver.getClass().getName())
this.dumObserver.getClass().getName() == orig(this.dumObserver.getClass().getName())
===========================================================================
ObserverEffect.Subject.registerObserver(ObserverEffect.Observer):::ENTER
observer.subject.observers[].ObserverB.value == this.observers[].ObserverB.value
this.dumObserver == observer.subject.dumObserver
this.dumObserver == this.dumObserver.subject.observers[this.state]
this.dumObserver == this.observers[this.observers[].ObserverB.value]
this.observers[].ObserverA == observer.subject.observers[].ObserverA
this.observers[].ObserverA == this.dumObserver.subject.observers[this.state]
this.observers[].ObserverA == this.observers[this.observers[].ObserverB.value]
this.observers[].ObserverB == observer.subject.observers[].ObserverB
observer.subject.observers[].ObserverA.value == this.dumObserver.subject.state
observer.subject.observers == this.observers
observer.subject.observers[] == this.observers[]
this.state == observer.subject.state
this.state == this.observers[].ObserverB.value
this == observer.subject
this.dumObserver.subject.state == this.observers[].ObserverB.value
this.dumObserver.subject.state == this.observers[].ObserverA.value
this.dumObserver.subject.state == this.dumObserver.subject.observers[].ObserverA.value
this.dumObserver.subject.dumObserver == this.dumObserver.subject.observers[this.state]
this.dumObserver.subject.dumObserver == this.observers[this.observers[].ObserverB.value]
observer.subject.observers[observer.subject.observers[].ObserverB.value] == this.observers[this.observers[].ObserverB.value]
this.observers[observer.subject.observers[].ObserverB.value] == this.observers[this.observers[].ObserverB.value]
observer.subject.observers[this.dumObserver.subject.observers[].ObserverB.value] == this.observers[this.observers[].ObserverB.value]
this.observers[this.dumObserver.subject.observers[].ObserverB.value] == this.observers[this.observers[].ObserverB.value]
observer.subject.observers[this.observers[].ObserverB.value] == this.observers[this.observers[].ObserverB.value]
this.dumObserver.subject.observers[].getClass().getName() one of { [ObserverEffect.ObserverA], [ObserverEffect.ObserverA, ObserverEffect.ObserverB] }
this.state == 0
this.dumObserver.subject.state == 0
this.observers[].ObserverB.value == 0
size(this.dumObserver.subject.observers[]) one of { 1, 2 }
size(this.observers[]) one of { 0, 1, 2 }
this.dumObserver.subject.observers[this.state] has only one value
this.observers[this.observers[].ObserverB.value] has only one value
observer.subject.observers.getClass().getName() == this.observers.getClass().getName()
this.dumObserver.getClass().getName() == observer.subject.dumObserver.getClass().getName()
===========================================================================
ObserverEffect.Subject.registerObserver(ObserverEffect.Observer):::EXIT
observer.subject.observers[].ObserverB.value == this.dumObserver.subject.state
this.dumObserver.subject.observers[].ObserverB.value == this.dumObserver.subject.state
this.dumObserver == observer.subject.dumObserver
this.dumObserver == orig(this.dumObserver)
this.dumObserver == orig(observer.subject.dumObserver)
this.dumObserver == this.dumObserver.subject.observers[this.state]
this.dumObserver == this.observers[this.observers[].ObserverC.value]
this.observers[].ObserverA == observer.subject.observers[].ObserverA
this.observers[].ObserverA == orig(this.observers[].ObserverA)
this.observers[].ObserverA == this.dumObserver.subject.observers[this.state]
this.observers[].ObserverA == this.observers[this.observers[].ObserverC.value]
this.observers[].ObserverA == this.observers[this.state]
this.observers[].ObserverB == observer.subject.observers[].ObserverB
this.observers[].ObserverB == orig(this.observers[].ObserverB)
this.observers[].ObserverC == observer.subject.observers[].ObserverC
this.observers[].ObserverC.value == this.state
this.observers[].ObserverC.value == this.dumObserver.subject.state
this.observers[].ObserverC.value == observer.subject.observers[].ObserverC.value
this.observers[].ObserverC.value == orig(observer.subject.observers[].ObserverB.value)
this.observers[].ObserverC.value == orig(this.dumObserver.subject.observers[].ObserverB.value)
this.observers[].ObserverC.value == orig(this.observers[].ObserverB.value)
this.dumObserver.subject.observers[].ObserverA == orig(this.observers[].ObserverA)
observer.subject.observers[].ObserverA.value == this.state
this.dumObserver.subject == observer.subject
this.dumObserver.subject == orig(this.dumObserver.subject)
observer.subject.observers == this.observers
observer.subject.observers[] == this.observers[]
this.observers == orig(observer.subject.observers)
this.observers == orig(this.observers)
this.state == observer.subject.state
this.state == this.observers[].ObserverA.value
this.state == orig(this.state)
this.state == orig(observer.subject.state)
this.dumObserver.subject.observers == orig(this.dumObserver.subject.observers)
this.dumObserver.subject.state == this.observers[].ObserverB.value
this.dumObserver.subject.state == this.dumObserver.subject.observers[].ObserverA.value
this.dumObserver.subject.state == orig(observer.subject.observers[].ObserverA.value)
this.dumObserver.subject.state == orig(this.dumObserver.subject.state)
this.dumObserver.subject.state == orig(this.observers[].ObserverA.value)
this.dumObserver.subject.state == orig(this.dumObserver.subject.observers[].ObserverA.value)
this.dumObserver.subject.dumObserver == orig(this.dumObserver.subject.dumObserver)
this.dumObserver.subject.dumObserver == this.dumObserver.subject.observers[this.state]
this.dumObserver.subject.dumObserver == this.observers[this.observers[].ObserverC.value]
this.dumObserver.subject.dumObserver == this.observers[this.state]
observer.subject == orig(this)
observer.subject == orig(observer.subject)
orig(this.observers[].ObserverA) == this.dumObserver.subject.observers[this.state]
orig(this.observers[].ObserverA) == this.observers[this.observers[].ObserverC.value]
orig(this.observers[].ObserverA) == this.observers[this.state]
size(this.dumObserver.subject.observers[])-1 == orig(size(this.dumObserver.subject.observers[]))
size(this.observers[])-1 == orig(size(observer.subject.observers[]))
size(this.observers[])-1 == orig(size(this.observers[]))
orig(this.dumObserver.subject.observers[post(observer.subject.observers[].ObserverB.value)]) == this.dumObserver.subject.observers[this.state]
orig(observer.subject.observers[post(observer.subject.observers[].ObserverB.value)]) == this.dumObserver.subject.observers[this.state]
orig(this.observers[post(observer.subject.observers[].ObserverB.value)]) == this.dumObserver.subject.observers[this.state]
orig(this.dumObserver.subject.observers[post(this.dumObserver.subject.observers[].ObserverB.value)]) == this.dumObserver.subject.observers[this.state]
orig(observer.subject.observers[post(this.dumObserver.subject.observers[].ObserverB.value)]) == this.dumObserver.subject.observers[this.state]
orig(this.observers[post(this.dumObserver.subject.observers[].ObserverB.value)]) == this.dumObserver.subject.observers[this.state]
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[post(observer.subject.observers[].ObserverA.value)])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[post(this.state)])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[post(this.dumObserver.subject.state)])
this.dumObserver.subject.observers[this.state] == orig(observer.subject.observers[post(this.dumObserver.subject.state)])
this.dumObserver.subject.observers[this.state] == orig(this.observers[post(this.dumObserver.subject.state)])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[post(observer.subject.state)])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[post(this.observers[].ObserverB.value)])
this.dumObserver.subject.observers[this.state] == orig(observer.subject.observers[post(this.observers[].ObserverB.value)])
this.dumObserver.subject.observers[this.state] == orig(this.observers[post(this.observers[].ObserverB.value)])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[post(this.observers[].ObserverA.value)])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[post(this.dumObserver.subject.observers[].ObserverA.value)])
this.dumObserver.subject.observers[this.state] == orig(observer.subject.observers[post(this.dumObserver.subject.observers[].ObserverA.value)])
this.dumObserver.subject.observers[this.state] == orig(this.observers[post(this.dumObserver.subject.observers[].ObserverA.value)])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[observer.subject.observers[].ObserverA.value])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[this.state])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[this.dumObserver.subject.state])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[observer.subject.state])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[this.observers[].ObserverA.value])
this.dumObserver.subject.observers[this.state] == orig(this.dumObserver.subject.observers[this.dumObserver.subject.observers[].ObserverA.value])
this.dumObserver.subject.observers[this.state] == orig(observer.subject.observers[observer.subject.observers[].ObserverA.value])
this.dumObserver.subject.observers[this.state] == orig(this.observers[observer.subject.observers[].ObserverA.value])
this.dumObserver.subject.observers[this.state] == orig(observer.subject.observers[this.dumObserver.subject.state])
this.dumObserver.subject.observers[this.state] == orig(observer.subject.observers[this.observers[].ObserverA.value])
this.dumObserver.subject.observers[this.state] == orig(observer.subject.observers[this.dumObserver.subject.observers[].ObserverA.value])
this.dumObserver.subject.observers[this.state] == orig(this.observers[this.dumObserver.subject.state])
this.dumObserver.subject.observers[this.state] == orig(this.observers[this.observers[].ObserverA.value])
this.dumObserver.subject.observers[this.state] == orig(this.observers[this.dumObserver.subject.observers[].ObserverA.value])
this.observers[this.observers[].ObserverC.value] == orig(this.dumObserver.subject.observers[post(this.observers[].ObserverC.value)])
this.observers[this.observers[].ObserverC.value] == orig(observer.subject.observers[post(this.observers[].ObserverC.value)])
this.observers[this.observers[].ObserverC.value] == orig(this.observers[post(this.observers[].ObserverC.value)])
this.observers[this.observers[].ObserverC.value] == orig(this.dumObserver.subject.observers[post(this.dumObserver.subject.observers[].ObserverC.value)])
this.observers[this.observers[].ObserverC.value] == orig(observer.subject.observers[post(this.dumObserver.subject.observers[].ObserverC.value)])
this.observers[this.observers[].ObserverC.value] == orig(this.observers[post(this.dumObserver.subject.observers[].ObserverC.value)])
this.observers[this.observers[].ObserverC.value] == orig(this.dumObserver.subject.observers[post(observer.subject.observers[].ObserverC.value)])
this.observers[this.observers[].ObserverC.value] == orig(observer.subject.observers[post(observer.subject.observers[].ObserverC.value)])
this.observers[this.observers[].ObserverC.value] == orig(this.observers[post(observer.subject.observers[].ObserverC.value)])
this.observers[this.observers[].ObserverC.value] == orig(this.dumObserver.subject.observers[observer.subject.observers[].ObserverB.value])
this.observers[this.observers[].ObserverC.value] == orig(observer.subject.observers[observer.subject.observers[].ObserverB.value])
this.observers[this.observers[].ObserverC.value] == orig(this.observers[observer.subject.observers[].ObserverB.value])
this.observers[this.observers[].ObserverC.value] == orig(this.dumObserver.subject.observers[this.dumObserver.subject.observers[].ObserverB.value])
this.observers[this.observers[].ObserverC.value] == orig(observer.subject.observers[this.dumObserver.subject.observers[].ObserverB.value])
this.observers[this.observers[].ObserverC.value] == orig(this.observers[this.dumObserver.subject.observers[].ObserverB.value])
this.observers[this.observers[].ObserverC.value] == orig(this.dumObserver.subject.observers[this.observers[].ObserverB.value])
this.observers[this.observers[].ObserverC.value] == orig(observer.subject.observers[this.observers[].ObserverB.value])
this.observers[this.observers[].ObserverC.value] == orig(this.observers[this.observers[].ObserverB.value])
this.observers[].ObserverC.value == 0
this.dumObserver.subject.observers[].getClass().getName() one of { [ObserverEffect.ObserverA, ObserverEffect.ObserverB], [ObserverEffect.ObserverA, ObserverEffect.ObserverB, ObserverEffect.ObserverC] }
this.state == 0
this.dumObserver.subject.state == 0
observer.subject has only one value
size(this.dumObserver.subject.observers[]) one of { 2, 3 }
size(this.observers[]) one of { 1, 2, 3 }
this.dumObserver.subject.observers[this.state] has only one value
this.observers[this.observers[].ObserverC.value] has only one value
this.observers[this.state] has only one value
this.dumObserver in orig(this.dumObserver.subject.observers[])
orig(observer) in this.dumObserver.subject.observers[]
orig(this.observers[].ObserverA) in this.dumObserver.subject.observers[]
orig(this.observers[].ObserverB) in this.dumObserver.subject.observers[]
this.observers[this.state] in this.dumObserver.subject.observers[]
this.observers[].ObserverA in orig(this.dumObserver.subject.observers[])
observer.subject.observers.getClass().getName() == this.observers.getClass().getName()
orig(observer.getClass().getName()) in this.dumObserver.subject.observers[].getClass().getName()
this.observers.getClass().getName() == orig(observer.subject.observers.getClass().getName())
this.observers.getClass().getName() == orig(this.observers.getClass().getName())
orig(observer.getClass().getName()) in this.observers[].getClass().getName()
orig(observer) in this.observers[]
orig(this.observers[].ObserverA) in this.observers[]
orig(this.observers[].ObserverB) in this.observers[]
this.dumObserver.subject.observers.getClass().getName() == orig(this.dumObserver.subject.observers.getClass().getName())
this.dumObserver.getClass().getName() == observer.subject.dumObserver.getClass().getName()
this.dumObserver.getClass().getName() == orig(this.dumObserver.subject.dumObserver.getClass().getName())
this.dumObserver.getClass().getName() in orig(this.dumObserver.subject.observers[].getClass().getName())
this.dumObserver.getClass().getName() in orig(this.observers[].getClass().getName())
this.dumObserver.getClass().getName() == orig(this.dumObserver.getClass().getName())
this.dumObserver.getClass().getName() == orig(observer.subject.dumObserver.getClass().getName())
this.dumObserver.subject.dumObserver in orig(this.dumObserver.subject.observers[])
this.dumObserver.subject.dumObserver in orig(this.observers[])
this.observers[this.state] in orig(this.dumObserver.subject.observers[])
===========================================================================
ObserverEffect.Subject.setState(int):::ENTER
this.dumObserver.subject.observers[].ObserverB.value == this.state
this.dumObserver.subject.observers[] == this.observers[]
this.observers[].ObserverC.value == this.state
this.state == this.dumObserver.subject.observers[].ObserverC.value
this.state == this.observers[].ObserverB.value
this.state == this.observers[].ObserverA.value
this.state == this.dumObserver.subject.observers[].ObserverA.value
this.dumObserver has only one value
state one of { 10, 15 }
this.state one of { 0, 15 }
this.observers[].getClass().getName() == [ObserverEffect.ObserverA, ObserverEffect.ObserverB, ObserverEffect.ObserverC]
this.observers[] contains no nulls and has only one value, of length 3
size(this.observers[]) == 3
this.dumObserver in this.observers[]
===========================================================================
ObserverEffect.Subject.setState(int):::EXIT
this.dumObserver.subject.observers[].ObserverB.value == this.state
this.dumObserver == orig(this.dumObserver)
this.dumObserver == orig(this.dumObserver.subject.dumObserver)
this.dumObserver.subject.observers[] == this.observers[]
this.observers[].ObserverA == orig(this.observers[].ObserverA)
this.observers[].ObserverA == orig(this.dumObserver.subject.observers[].ObserverA)
this.observers[].ObserverB == orig(this.observers[].ObserverB)
this.observers[].ObserverB == orig(this.dumObserver.subject.observers[].ObserverB)
this.observers[].ObserverC == orig(this.dumObserver.subject.observers[].ObserverC)
this.observers[].ObserverC == orig(this.observers[].ObserverC)
this.observers[].ObserverC.value == this.state
this.dumObserver.subject == orig(this)
this.observers == orig(this.observers)
this.observers == orig(this.dumObserver.subject.observers)
this.state == this.dumObserver.subject.observers[].ObserverC.value
this.state == this.observers[].ObserverB.value
this.state == this.observers[].ObserverA.value
this.state == this.dumObserver.subject.observers[].ObserverA.value
this.state == orig(state)
this.observers[] == orig(this.dumObserver.subject.observers[])
this.observers[] == orig(this.observers[])
this.dumObserver has only one value
this.state one of { 10, 15 }
this.observers[].getClass().getName() == [ObserverEffect.ObserverA, ObserverEffect.ObserverB, ObserverEffect.ObserverC]
this.observers[] contains no nulls and has only one value, of length 3
orig(this) has only one value
size(this.observers[]) == 3
this.dumObserver in this.observers[]
this.observers.getClass().getName() == orig(this.observers.getClass().getName())
this.observers.getClass().getName() == orig(this.dumObserver.subject.observers.getClass().getName())
this.dumObserver.getClass().getName() == orig(this.dumObserver.subject.dumObserver.getClass().getName())
this.dumObserver.getClass().getName() == orig(this.dumObserver.getClass().getName())
===========================================================================
ObserverEffect.TestingObservers.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
ObserverEffect.TestingObservers.main(java.lang.String[]):::EXIT
args[] == orig(args[])
args[] == []
args[].toString == []
Exiting Daikon.
